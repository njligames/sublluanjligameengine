<snippet>
	<content><![CDATA[
local BaseClass = require "NJLI.STATEMACHINE.NodeEntity"

local ${1:NodeEntity} = {}
${1:NodeEntity}.__index = ${1:NodeEntity}

--#############################################################################
--DO NOT EDIT ABOVE
--#############################################################################

--#############################################################################
--Begin Custom Code
--Required local functions:
-- __ctor()
-- __dtor()
-- __load()
-- __unLoad()
--#############################################################################

local __ctor = function(self, init)
  --TODO: construct this Entity
end

local __dtor = function(self)
  --TODO: destruct this Entity
end

local __load = function(self)
  --TODO: load this Entity
end

local __unLoad = function(self)
  --TODO: unload this Entity
end

--#############################################################################

function ${1:NodeEntity}:enter()
  BaseClass.enter(self)
  print("${1:NodeEntity}:enter()")
end

function ${1:NodeEntity}:update(timeStep)
  BaseClass.update(self, timeStep)
  print("${1:NodeEntity}:update()")
end

function ${1:NodeEntity}:exit()
  BaseClass.exit(self)
  print("${1:NodeEntity}:exit()")
end

function ${1:NodeEntity}:onMessage()
  BaseClass.onMessage(self)
  print("${1:NodeEntity}:onMessage()")
end

function ${1:NodeEntity}:rayTouchDown(rayContact)
  BaseClass.rayTouchDown(self, rayContact)
  print("${1:NodeEntity}:enter()")
end

function ${1:NodeEntity}:rayTouchUp(rayContact)
  BaseClass.rayTouchUp(self, rayContact)
  print("${1:NodeEntity}:enter()")
end

function ${1:NodeEntity}:rayTouchMove(rayContact)
  BaseClass.rayTouchMove(self, rayContact)
  print("${1:NodeEntity}:enter()")
end

function ${1:NodeEntity}:rayTouchCancelled(rayContact)
  BaseClass.rayTouchCancelled(self, rayContact)
  print("${1:NodeEntity}:enter()")
end

function ${1:NodeEntity}:collide(otherNode, collisionPoint)
  BaseClass.collide(self, otherNode, collisionPoint)
  print("${1:NodeEntity}:enter()")
end

function ${1:NodeEntity}:near(otherNode)
  BaseClass.near(self, otherNode)
  print("${1:NodeEntity}:enter()")
end

function ${1:NodeEntity}:actionUpdate(action, timeStep)
  BaseClass.actionUpdate(self, action, timeStep)
  print("${1:NodeEntity}:enter()")
end

function ${1:NodeEntity}:actionComplete(action)
  BaseClass.actionComplete(self, action)
  print("${1:NodeEntity}:enter()")
end

--#############################################################################
--End Custom Code
--#############################################################################

--#############################################################################
--DO NOT EDIT BELOW
--#############################################################################

setmetatable(${1:NodeEntity}, {
    __index = BaseClass,
    __call = function (cls, ...)
      local self = setmetatable({}, cls)
      --Create the base first
      BaseClass._create(self, ...)
      self:_create(...)
      return self
    end,
  })

function ${1:NodeEntity}:className()
  return "${1:NodeEntity}"
end

function ${1:NodeEntity}:class()
  return self
end

function ${1:NodeEntity}:superClass()
  return BaseClass
end

function ${1:NodeEntity}:__gc()
  --Destroy derived class first
  ${1:NodeEntity}._destroy(self)
  --Destroy base class after derived class
  BaseClass._destroy(self)
end

function ${1:NodeEntity}:__tostring()
  local ret = self:className() .. " =\n{\n"

  for pos,val in pairs(self) do
    ret = ret .. "\t" .. "["..pos.."]" .. " => " .. type(val) .. " = " .. tostring(val) .. "\n"
  end

  ret = ret .. "\n\t" .. tostring_r(BaseClass) .. "\n}"
  return ret .. "\n\t" .. tostring_r(getmetatable(self)) .. "\n}"
end

function ${1:NodeEntity}:_destroy()
  assert(not self.__${1:NodeEntity}CalledLoad, "Must unload before you destroy")
  __dtor(self)
end

function ${1:NodeEntity}:_create(init)
  self.__${1:NodeEntity}CalledLoad = false
  __ctor(self, init)
end

function ${1:NodeEntity}:load()
  --load base first
  BaseClass.load(self)

  --load derived last...
  __load(self)

  self.__${1:NodeEntity}CalledLoad = true
end

function ${1:NodeEntity}:unLoad()
  assert(self.__${1:NodeEntity}CalledLoad, "Must load before unloading")

  --unload derived first...
  __unLoad(self)
  self.__${1:NodeEntity}CalledLoad = false

  --unload base last...
  BaseClass.unLoad(self)
end

return ${1:NodeEntity}

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>nodeEntity</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.lua</scope>
</snippet>
