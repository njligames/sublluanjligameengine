<snippet>
	<content><![CDATA[
local BaseClass = require "NJLI.STATEMACHINE.NodeEntityState"

local ${1:NodeEntityState} = {}
${1:NodeEntityState}.__index = ${1:NodeEntityState}

--#############################################################################
--DO NOT EDIT ABOVE
--#############################################################################

--#############################################################################
--Begin Custom Code
--Required local functions:
-- __ctor()
-- __dtor()
-- __load()
-- __unLoad()
--#############################################################################

local __ctor = function(self, init)
  --TODO: construct this Entity
end

local __dtor = function(self)
  --TODO: destruct this Entity
end

local __load = function(self)
  --TODO: load this Entity
end

local __unLoad = function(self)
  --TODO: unload this Entity
end

--############################################################################# 

function ${1:NodeEntityState}:enter()
  BaseClass.enter(self)
end

function ${1:NodeEntityState}:update(timeStep)
  BaseClass.update(self, timeStep)
end

function ${1:NodeEntityState}:exit()
  BaseClass.exit(self)
end

function ${1:NodeEntityState}:onMessage()
  BaseClass.onMessage(self)
end

function ${1:NodeEntityState}:rayTouchesDown(rayContact)
  BaseClass.rayTouchesDown(self, rayContact)
end

function ${1:NodeEntityState}:rayTouchesUp(rayContact)
  BaseClass.rayTouchesUp(self, rayContact)
end

function ${1:NodeEntityState}:rayTouchesMove(rayContact)
  BaseClass.rayTouchesMove(self, rayContact)
end

function ${1:NodeEntityState}:rayTouchesCancelled(rayContact)
  BaseClass.rayTouchesCancelled(self, rayContact)
end

function ${1:NodeEntityState}:rayTouchesMissed(node)
  BaseClass.rayTouchesMissed(self, node)
end

function ${1:NodeEntityState}:rayTouchDown(rayContact)
  BaseClass.rayTouchDown(self, rayContact)
end

function ${1:NodeEntityState}:rayTouchUp(rayContact)
  BaseClass.rayTouchUp(self, rayContact)
end

function ${1:NodeEntityState}:rayTouchMove(rayContact)
  BaseClass.rayTouchMove(self, rayContact)
end

function ${1:NodeEntityState}:rayTouchCancelled(rayContact)
  BaseClass.rayTouchCancelled(self, rayContact)
end

function ${1:NodeEntityState}:rayTouchMissed(node)
  BaseClass.rayTouchMissed(self, node)
end

function ${1:NodeEntityState}:rayMouseDown(rayContact)
  BaseClass.rayMouseDown(self, rayContact)
end

function ${1:NodeEntityState}:rayMouseUp(rayContact)
  BaseClass.rayMouseUp(self, rayContact)
end

function ${1:NodeEntityState}:rayMouseMove(rayContact)
  BaseClass.rayMouseMove(self, rayContact)
end

function ${1:NodeEntityState}:rayMouseMissed(node)
  BaseClass.rayMouseMissed(self, node)
end

function ${1:NodeEntityState}:collide(otherNode, collisionPoint)
  BaseClass.collide(self, otherNode, collisionPoint)
end

function ${1:NodeEntityState}:near(otherNode)
  BaseClass.near(self, otherNode)
end

function ${1:NodeEntityState}:actionUpdate(action, timeStep)
  BaseClass.actionUpdate(self, action, timeStep)
end

function ${1:NodeEntityState}:actionComplete(action)
  BaseClass.actionComplete(self, action)
end

function ${1:NodeEntityState}:keyboardShow()
  BaseClass.keyboardShow(self)
end

function ${1:NodeEntityState}:keyboardCancel()
  BaseClass.keyboardCancel(self)
end

function ${1:NodeEntityState}:keyboardReturn()
  BaseClass.keyboardReturn(self)
end

function ${1:NodeEntityState}:renderHUD()
  BaseClass.renderHUD(self)
end

function ${1:NodeEntityState}:gamePause()
  BaseClass.gamePause(self)
end

function ${1:NodeEntityState}:gameUnPause()
  BaseClass.gameUnPause(self)
end

function ${1:NodeEntityState}:touchesDown(touches)
  BaseClass.touchesDown(self, touches)
end

function ${1:NodeEntityState}:touchesUp(touches)
  BaseClass.touchesUp(self, touches)
end

function ${1:NodeEntityState}:touchesMove(touches)
  BaseClass.touchesMove(self, touches)
end

function ${1:NodeEntityState}:touchesCancelled(touches)
  BaseClass.touchesCancelled(self, touches)
end

function ${1:NodeEntityState}:touchDown(touch)
  BaseClass.touchDown(self, touch)
end

function ${1:NodeEntityState}:touchUp(touch)
  BaseClass.touchUp(self, touch)
end

function ${1:NodeEntityState}:touchMove(touch)
  BaseClass.touchMove(self, touch)
end

function ${1:NodeEntityState}:touchCancelled(touch)
  BaseClass.touchCancelled(self, touch)
end

function ${1:NodeEntityState}:mouseDown(mouse)
  BaseClass.mouseDown(self, mouse)
end

function ${1:NodeEntityState}:mouseUp(mouse)
  BaseClass.mouseUp(self, mouse)
end

function ${1:NodeEntityState}:mouseMove(mouse)
  BaseClass.mouseMove(self, mouse)
end

--#############################################################################
--End Custom Code
--#############################################################################

--#############################################################################
--DO NOT EDIT BELOW
--#############################################################################

setmetatable(${1:NodeEntityState}, {
    __index = BaseClass,
    __call = function (cls, ...)
      local self = setmetatable({}, cls)
      --Create the base first
      BaseClass._create(self, ...)
      self:_create(...)
      return self
    end,
  })

function ${1:NodeEntityState}:className()
  return "${1:NodeEntityState}"
end

function ${1:NodeEntityState}:class()
  return self
end

function ${1:NodeEntityState}:superClass()
  return BaseClass
end

function ${1:NodeEntityState}:__gc()
  --Destroy derived class first
  ${1:NodeEntityState}._destroy(self)
  --Destroy base class after derived class
  BaseClass._destroy(self)
end

function ${1:NodeEntityState}:__tostring()
  local ret = self:className() .. " =\n{\n"
  
  for pos,val in pairs(self) do 
    ret = ret .. "\t" .. "["..pos.."]" .. " => " .. type(val) .. " = " .. tostring(val) .. "\n"
  end

  ret = ret .. "\n\t" .. tostring_r(BaseClass) .. "\n}"
  return ret .. "\n\t" .. tostring_r(getmetatable(self)) .. "\n}"
end

function ${1:NodeEntityState}:_destroy()
  assert(not self.__${1:NodeEntityState}CalledLoad, "Must unload before you destroy")
  __dtor(self)
end

function ${1:NodeEntityState}:_create(init)
  self.__${1:NodeEntityState}CalledLoad = false
  __ctor(self, init)
end

function ${1:NodeEntityState}:load()
  --load base first
  BaseClass.load(self)

  --load derived last...
  __load(self)

  self.__${1:NodeEntityState}CalledLoad = true
end

function ${1:NodeEntityState}:unLoad()
  assert(self.__${1:NodeEntityState}CalledLoad, "Must load before unloading")

  --unload derived first...
  __unLoad(self)
  self.__${1:NodeEntityState}CalledLoad = false

  --unload base last...
  BaseClass.unLoad(self)
end

return ${1:NodeEntityState}

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>nodeEntityStateChild</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.lua</scope>
</snippet>
